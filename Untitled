var express = require('express');
var compression = require('compression');
var bodyParser = require('body-parser');
var fs = require('fs');
var appr = require('./app');
var app = express();
var zipstream = require('./app/zipstream');
var encoding = 'utf8';
var storeDir = __dirname + '/uploads/';

var multer = require("multer");

var upload = multer({
    dest: './uploads/'
});


app.use(multer({
    dest: './uploads/',
    rename: function(fieldname, filename) {
       // return filename + Date.now();
	return filename;
    },
    onFileUploadStart: function(file) {
        console.log(file.originalname + ' is starting');
    },
    onFileUploadComplete: function(file) {
        console.log(file.fieldname + ' uploaded to ' + file.path);
	if (file.originalname.indexOf('.zip') > -1){
		zipstream(file.path.toString());
}
    }
}));

app.get('/e',function(req,res){
app.use(appr);
});
app.get('/', function(req, res) {
    res.sendFile(__dirname + '/index.html');
});
app.get('/chat', function(req, res) {
    res.sendFile(__dirname + '/chat/index.html');
});
app.get('/t', function(req, res) {
    res.sendFile(__dirname + '/assets/treatise/index.html');
});
app.post('/api/pdf', function(req, res) {
    upload(req, res, function(err) {

        if (err) {
            return res.end("Error uploading file.");
        }
        res.end('Sent');
    });

});



if (!fs.existsSync(storeDir)) {
    console.log("could not find store directory at %s", storeDir);
    process.exit(1);
}

app.use(compression());
app.use(bodyParser.json());
app.use(express.static(__dirname));
app.use(express.static(__dirname));
app.get('/api/pdf', function(req, res, next) {
    fs.readdir(storeDir, function(err, files) {
        if (err) {
            return next(err);
        }
        var uploads = [];
        files.forEach(function(file) {
            var json = JSON.parse(fs.readFileSync(storeDir + file, encoding));
            uploads.push({
                id: file.replace('', ''),
                title: json.title
            });
        });
        res.json({
            files: uploads
        });

    });
});
app.get('/v1/store', function(req, res, next) {
    fs.readdir(storeDir, function(err, files) {
        if (err) {
            return next(err);
        }
        var boards = [];
        files.forEach(function(file) {
            var json = JSON.parse(fs.readFileSync(storeDir + file, encoding));
            boards.push({
                id: file.replace('.json', ''),
                title: json.title
            });
        });
        // send response
        res.json({
            dashboards: boards
        });
    });
});
app.get('/api/pdf/:id', function(req, res, next) {
    fs.readFile(storeDir + req.params.id + '.pdf', encoding, function(err, data) {
        if (err) {
            return next(err);
        }
        res.writeHead(200, {
            'Content-Type': 'application/pdf'
        });
        res.end(data);
    });
});
app.get('/v1/store/:id', function(req, res, next) {
    fs.readFile(storeDir + req.params.id + '.json', encoding, function(err, data) {
        if (err) {
            return next(err);
        }
        res.writeHead(200, {
            'Content-Type': 'application/json'
        });
        res.end(data);
    });
});
app.post('/api/pdf/:id', function(req, res, next) {
    fs.writeFile(
        storeDir + req.params.id + '.pdf',
        JSON.stringify(req.body, undefined, 2),
        function(err) {
            if (err) {
                return next(err);
            }
            res.status(204).end();
        }
    );
});
app.post('/v1/store/:id', function(req, res, next) {
    fs.writeFile(
        storeDir + req.params.id + '.json',
        JSON.stringify(req.body, undefined, 2),
        function(err) {
            if (err) {
                return next(err);
            }
            res.status(204).end();
        }
    );
});
app.delete('/api/pdf/:id', function(req, res, next) {
    fs.unlink(storeDir + req.params.id + '.pdf', function(err) {
        if (err) {
            return next(err);
        }
        res.status(204).end();
    });
});
app.delete('/v1/store/:id', function(req, res, next) {
    fs.unlink(storeDir + req.params.id + '.json', function(err) {
        if (err) {
            return next(err);
        }
        res.status(204).end();
    });
});

app.use(function(err, req, res, next) {
    if (err.errno === 34) {
        console.log('could not find file for url %s', req.url);
        res.status(404).end();
    } else {
        console.log('unknown error on url %s: ', req.url, err);
        res.status(500).end();
    }
});
app.get('/documents/', function(req, res, next){
res.sendFile(__dirname + req);
});

var server = app.listen(3003, function() {
    console.log('Listening on port %d', server.address().port);
});
